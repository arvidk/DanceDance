
./Debug/Dance.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fc0e 	bl	20000824 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


void delay_250ns(){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	
	
	*((unsigned long *)STK_CTRL) = 0x00;
20000014:	4b0e      	ldr	r3, [pc, #56]	; (20000050 <delay_250ns+0x40>)
20000016:	681b      	ldr	r3, [r3, #0]
20000018:	2200      	movs	r2, #0
2000001a:	601a      	str	r2, [r3, #0]
	*((unsigned long *)STK_LOAD )=1;
2000001c:	4b0d      	ldr	r3, [pc, #52]	; (20000054 <delay_250ns+0x44>)
2000001e:	681b      	ldr	r3, [r3, #0]
20000020:	2201      	movs	r2, #1
20000022:	601a      	str	r2, [r3, #0]
	*((unsigned long *)STK_VAL )=0;
20000024:	4b0c      	ldr	r3, [pc, #48]	; (20000058 <delay_250ns+0x48>)
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	2200      	movs	r2, #0
2000002a:	601a      	str	r2, [r3, #0]
	*((unsigned long *)STK_CTRL) =5;
2000002c:	4b08      	ldr	r3, [pc, #32]	; (20000050 <delay_250ns+0x40>)
2000002e:	681b      	ldr	r3, [r3, #0]
20000030:	2205      	movs	r2, #5
20000032:	601a      	str	r2, [r3, #0]
	while(*((unsigned long *)STK_CTRL) < 0x8){
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	4b06      	ldr	r3, [pc, #24]	; (20000050 <delay_250ns+0x40>)
20000038:	681b      	ldr	r3, [r3, #0]
2000003a:	681b      	ldr	r3, [r3, #0]
2000003c:	2b07      	cmp	r3, #7
2000003e:	d9fa      	bls.n	20000036 <delay_250ns+0x26>
	}
	*((unsigned long *)STK_CTRL) = 0;
20000040:	4b03      	ldr	r3, [pc, #12]	; (20000050 <delay_250ns+0x40>)
20000042:	681b      	ldr	r3, [r3, #0]
20000044:	2200      	movs	r2, #0
20000046:	601a      	str	r2, [r3, #0]
}
20000048:	46c0      	nop			; (mov r8, r8)
2000004a:	46bd      	mov	sp, r7
2000004c:	bd80      	pop	{r7, pc}
2000004e:	46c0      	nop			; (mov r8, r8)
20000050:	20000838 	andcs	r0, r0, r8, lsr r8
20000054:	2000083c 	andcs	r0, r0, ip, lsr r8
20000058:	20000840 	andcs	r0, r0, r0, asr #16

2000005c <delay_500ns>:
void delay_500ns(){
2000005c:	b580      	push	{r7, lr}
2000005e:	af00      	add	r7, sp, #0
	
	delay_250ns();
20000060:	f7ff ffd6 	bl	20000010 <delay_250ns>
	delay_250ns();
20000064:	f7ff ffd4 	bl	20000010 <delay_250ns>

}
20000068:	46c0      	nop			; (mov r8, r8)
2000006a:	46bd      	mov	sp, r7
2000006c:	bd80      	pop	{r7, pc}
2000006e:	46c0      	nop			; (mov r8, r8)

20000070 <delay_mikro>:
void delay_mikro(unsigned int ms){
20000070:	b580      	push	{r7, lr}
20000072:	b084      	sub	sp, #16
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
	for (unsigned int j = ms/4; j > 0 ; j--){
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	089b      	lsrs	r3, r3, #2
2000007c:	60fb      	str	r3, [r7, #12]
2000007e:	e004      	b.n	2000008a <delay_mikro+0x1a>
		delay_250ns();
20000080:	f7ff ffc6 	bl	20000010 <delay_250ns>
	for (unsigned int j = ms/4; j > 0 ; j--){
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	3b01      	subs	r3, #1
20000088:	60fb      	str	r3, [r7, #12]
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	2b00      	cmp	r3, #0
2000008e:	d1f7      	bne.n	20000080 <delay_mikro+0x10>

	}

}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	b004      	add	sp, #16
20000096:	bd80      	pop	{r7, pc}

20000098 <delay_milli>:
void delay_milli(unsigned int ms){
20000098:	b580      	push	{r7, lr}
2000009a:	b084      	sub	sp, #16
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
	
	#ifdef SIMULATOR
	ms=ms/1000;
	ms++;
	#endif
	for(unsigned int i= ms*500; i > 0; i--){
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	22fa      	movs	r2, #250	; 0xfa
200000a4:	0052      	lsls	r2, r2, #1
200000a6:	4353      	muls	r3, r2
200000a8:	60fb      	str	r3, [r7, #12]
200000aa:	e005      	b.n	200000b8 <delay_milli+0x20>
	delay_mikro(2);
200000ac:	2002      	movs	r0, #2
200000ae:	f7ff ffdf 	bl	20000070 <delay_mikro>
	for(unsigned int i= ms*500; i > 0; i--){
200000b2:	68fb      	ldr	r3, [r7, #12]
200000b4:	3b01      	subs	r3, #1
200000b6:	60fb      	str	r3, [r7, #12]
200000b8:	68fb      	ldr	r3, [r7, #12]
200000ba:	2b00      	cmp	r3, #0
200000bc:	d1f6      	bne.n	200000ac <delay_milli+0x14>
	}
}
200000be:	46c0      	nop			; (mov r8, r8)
200000c0:	46bd      	mov	sp, r7
200000c2:	b004      	add	sp, #16
200000c4:	bd80      	pop	{r7, pc}
200000c6:	46c0      	nop			; (mov r8, r8)

200000c8 <graphic_ctrl_bit_set>:



void graphic_ctrl_bit_set( unit_8 x ) { /* Funktion för att 1-ställa bitar */
200000c8:	b580      	push	{r7, lr}
200000ca:	b084      	sub	sp, #16
200000cc:	af00      	add	r7, sp, #0
200000ce:	0002      	movs	r2, r0
200000d0:	1dfb      	adds	r3, r7, #7
200000d2:	701a      	strb	r2, [r3, #0]
unit_8 c;
c = *portOdrLow;
200000d4:	4a12      	ldr	r2, [pc, #72]	; (20000120 <graphic_ctrl_bit_set+0x58>)
200000d6:	230f      	movs	r3, #15
200000d8:	18fb      	adds	r3, r7, r3
200000da:	7812      	ldrb	r2, [r2, #0]
200000dc:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
200000de:	230f      	movs	r3, #15
200000e0:	18fb      	adds	r3, r7, r3
200000e2:	220f      	movs	r2, #15
200000e4:	18ba      	adds	r2, r7, r2
200000e6:	7812      	ldrb	r2, [r2, #0]
200000e8:	2104      	movs	r1, #4
200000ea:	438a      	bics	r2, r1
200000ec:	701a      	strb	r2, [r3, #0]
c |= (~B_SELECT & x);
200000ee:	1dfb      	adds	r3, r7, #7
200000f0:	781b      	ldrb	r3, [r3, #0]
200000f2:	b25b      	sxtb	r3, r3
200000f4:	2204      	movs	r2, #4
200000f6:	4393      	bics	r3, r2
200000f8:	b25a      	sxtb	r2, r3
200000fa:	230f      	movs	r3, #15
200000fc:	18fb      	adds	r3, r7, r3
200000fe:	781b      	ldrb	r3, [r3, #0]
20000100:	b25b      	sxtb	r3, r3
20000102:	4313      	orrs	r3, r2
20000104:	b25a      	sxtb	r2, r3
20000106:	230f      	movs	r3, #15
20000108:	18fb      	adds	r3, r7, r3
2000010a:	701a      	strb	r2, [r3, #0]
*portOdrLow = c;
2000010c:	4a04      	ldr	r2, [pc, #16]	; (20000120 <graphic_ctrl_bit_set+0x58>)
2000010e:	230f      	movs	r3, #15
20000110:	18fb      	adds	r3, r7, r3
20000112:	781b      	ldrb	r3, [r3, #0]
20000114:	7013      	strb	r3, [r2, #0]
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b004      	add	sp, #16
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	40021014 	andmi	r1, r2, r4, lsl r0

20000124 <graphic_ctrl_bit_clear>:
void graphic_ctrl_bit_clear( unit_8 x ){
20000124:	b580      	push	{r7, lr}
20000126:	b084      	sub	sp, #16
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
unit_8 c;
c =*portOdrLow;
20000130:	4a11      	ldr	r2, [pc, #68]	; (20000178 <graphic_ctrl_bit_clear+0x54>)
20000132:	230f      	movs	r3, #15
20000134:	18fb      	adds	r3, r7, r3
20000136:	7812      	ldrb	r2, [r2, #0]
20000138:	701a      	strb	r2, [r3, #0]
c &=~B_SELECT;
2000013a:	230f      	movs	r3, #15
2000013c:	18fb      	adds	r3, r7, r3
2000013e:	220f      	movs	r2, #15
20000140:	18ba      	adds	r2, r7, r2
20000142:	7812      	ldrb	r2, [r2, #0]
20000144:	2104      	movs	r1, #4
20000146:	438a      	bics	r2, r1
20000148:	701a      	strb	r2, [r3, #0]
c &=~x;
2000014a:	1dfb      	adds	r3, r7, #7
2000014c:	781b      	ldrb	r3, [r3, #0]
2000014e:	b25b      	sxtb	r3, r3
20000150:	43db      	mvns	r3, r3
20000152:	b25b      	sxtb	r3, r3
20000154:	220f      	movs	r2, #15
20000156:	18ba      	adds	r2, r7, r2
20000158:	7812      	ldrb	r2, [r2, #0]
2000015a:	b252      	sxtb	r2, r2
2000015c:	4013      	ands	r3, r2
2000015e:	b25a      	sxtb	r2, r3
20000160:	230f      	movs	r3, #15
20000162:	18fb      	adds	r3, r7, r3
20000164:	701a      	strb	r2, [r3, #0]
*portOdrLow=c;
20000166:	4a04      	ldr	r2, [pc, #16]	; (20000178 <graphic_ctrl_bit_clear+0x54>)
20000168:	230f      	movs	r3, #15
2000016a:	18fb      	adds	r3, r7, r3
2000016c:	781b      	ldrb	r3, [r3, #0]
2000016e:	7013      	strb	r3, [r2, #0]
} 
20000170:	46c0      	nop			; (mov r8, r8)
20000172:	46bd      	mov	sp, r7
20000174:	b004      	add	sp, #16
20000176:	bd80      	pop	{r7, pc}
20000178:	40021014 	andmi	r1, r2, r4, lsl r0

2000017c <select_controller>:

void select_controller(unit_8 s){
2000017c:	b580      	push	{r7, lr}
2000017e:	b082      	sub	sp, #8
20000180:	af00      	add	r7, sp, #0
20000182:	0002      	movs	r2, r0
20000184:	1dfb      	adds	r3, r7, #7
20000186:	701a      	strb	r2, [r3, #0]
	switch(s){
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	2b08      	cmp	r3, #8
2000018e:	d008      	beq.n	200001a2 <select_controller+0x26>
20000190:	dc02      	bgt.n	20000198 <select_controller+0x1c>
20000192:	2b00      	cmp	r3, #0
20000194:	d017      	beq.n	200001c6 <select_controller+0x4a>
		break;
	case 0:
		graphic_ctrl_bit_clear(B_CS1|B_CS2);
		break;
	}
}
20000196:	e01a      	b.n	200001ce <select_controller+0x52>
	switch(s){
20000198:	2b10      	cmp	r3, #16
2000019a:	d009      	beq.n	200001b0 <select_controller+0x34>
2000019c:	2b18      	cmp	r3, #24
2000019e:	d00e      	beq.n	200001be <select_controller+0x42>
}
200001a0:	e015      	b.n	200001ce <select_controller+0x52>
		graphic_ctrl_bit_clear(B_CS2);
200001a2:	2010      	movs	r0, #16
200001a4:	f7ff ffbe 	bl	20000124 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS1);
200001a8:	2008      	movs	r0, #8
200001aa:	f7ff ff8d 	bl	200000c8 <graphic_ctrl_bit_set>
		break;
200001ae:	e00e      	b.n	200001ce <select_controller+0x52>
		graphic_ctrl_bit_clear(B_CS1);
200001b0:	2008      	movs	r0, #8
200001b2:	f7ff ffb7 	bl	20000124 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS2);
200001b6:	2010      	movs	r0, #16
200001b8:	f7ff ff86 	bl	200000c8 <graphic_ctrl_bit_set>
		break;
200001bc:	e007      	b.n	200001ce <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS1|B_CS2);
200001be:	2018      	movs	r0, #24
200001c0:	f7ff ff82 	bl	200000c8 <graphic_ctrl_bit_set>
		break;
200001c4:	e003      	b.n	200001ce <select_controller+0x52>
		graphic_ctrl_bit_clear(B_CS1|B_CS2);
200001c6:	2018      	movs	r0, #24
200001c8:	f7ff ffac 	bl	20000124 <graphic_ctrl_bit_clear>
		break;
200001cc:	46c0      	nop			; (mov r8, r8)
}
200001ce:	46c0      	nop			; (mov r8, r8)
200001d0:	46bd      	mov	sp, r7
200001d2:	b002      	add	sp, #8
200001d4:	bd80      	pop	{r7, pc}
200001d6:	46c0      	nop			; (mov r8, r8)

200001d8 <graphic_wait_ready>:
void graphic_wait_ready(void){
200001d8:	b580      	push	{r7, lr}
200001da:	b082      	sub	sp, #8
200001dc:	af00      	add	r7, sp, #0
	unit_8 c;
	graphic_ctrl_bit_clear(B_E);
200001de:	2040      	movs	r0, #64	; 0x40
200001e0:	f7ff ffa0 	bl	20000124 <graphic_ctrl_bit_clear>
	*portModer= (0x00005555); //sets port 15-8 to inputs and 7-0 to outputs
200001e4:	4b17      	ldr	r3, [pc, #92]	; (20000244 <graphic_wait_ready+0x6c>)
200001e6:	4a18      	ldr	r2, [pc, #96]	; (20000248 <graphic_wait_ready+0x70>)
200001e8:	601a      	str	r2, [r3, #0]
	*portOdrLow = ((*portOdrLow & ~0x01)| 0x02); //turns off RS and RW on
200001ea:	4a18      	ldr	r2, [pc, #96]	; (2000024c <graphic_wait_ready+0x74>)
200001ec:	4b17      	ldr	r3, [pc, #92]	; (2000024c <graphic_wait_ready+0x74>)
200001ee:	781b      	ldrb	r3, [r3, #0]
200001f0:	b2db      	uxtb	r3, r3
200001f2:	b25b      	sxtb	r3, r3
200001f4:	2103      	movs	r1, #3
200001f6:	438b      	bics	r3, r1
200001f8:	b25b      	sxtb	r3, r3
200001fa:	2102      	movs	r1, #2
200001fc:	430b      	orrs	r3, r1
200001fe:	b25b      	sxtb	r3, r3
20000200:	b2db      	uxtb	r3, r3
20000202:	7013      	strb	r3, [r2, #0]
	delay_500ns();
20000204:	f7ff ff2a 	bl	2000005c <delay_500ns>
	
	while(1){
		graphic_ctrl_bit_set(B_E);
20000208:	2040      	movs	r0, #64	; 0x40
2000020a:	f7ff ff5d 	bl	200000c8 <graphic_ctrl_bit_set>
		delay_500ns();
2000020e:	f7ff ff25 	bl	2000005c <delay_500ns>
		c =*portIdrHigh & 0x80;
20000212:	4b0f      	ldr	r3, [pc, #60]	; (20000250 <graphic_wait_ready+0x78>)
20000214:	781b      	ldrb	r3, [r3, #0]
20000216:	b2da      	uxtb	r2, r3
20000218:	1dfb      	adds	r3, r7, #7
2000021a:	217f      	movs	r1, #127	; 0x7f
2000021c:	438a      	bics	r2, r1
2000021e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000220:	2040      	movs	r0, #64	; 0x40
20000222:	f7ff ff7f 	bl	20000124 <graphic_ctrl_bit_clear>
		delay_500ns();
20000226:	f7ff ff19 	bl	2000005c <delay_500ns>
		if(c == 0){
2000022a:	1dfb      	adds	r3, r7, #7
2000022c:	781b      	ldrb	r3, [r3, #0]
2000022e:	2b00      	cmp	r3, #0
20000230:	d000      	beq.n	20000234 <graphic_wait_ready+0x5c>
			break;
		}
	}
20000232:	e7e9      	b.n	20000208 <graphic_wait_ready+0x30>
			break;
20000234:	46c0      	nop			; (mov r8, r8)
	
	*portModer= (0x55555555); //sets port 15-8 to outputs
20000236:	4b03      	ldr	r3, [pc, #12]	; (20000244 <graphic_wait_ready+0x6c>)
20000238:	4a06      	ldr	r2, [pc, #24]	; (20000254 <graphic_wait_ready+0x7c>)
2000023a:	601a      	str	r2, [r3, #0]
	
}
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	46bd      	mov	sp, r7
20000240:	b002      	add	sp, #8
20000242:	bd80      	pop	{r7, pc}
20000244:	40021000 	andmi	r1, r2, r0
20000248:	00005555 	andeq	r5, r0, r5, asr r5
2000024c:	40021014 	andmi	r1, r2, r4, lsl r0
20000250:	40021011 	andmi	r1, r2, r1, lsl r0
20000254:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000258 <graphic_read_controller>:

unit_8 graphic_read_controller( unit_8 controller ){
20000258:	b580      	push	{r7, lr}
2000025a:	b084      	sub	sp, #16
2000025c:	af00      	add	r7, sp, #0
2000025e:	0002      	movs	r2, r0
20000260:	1dfb      	adds	r3, r7, #7
20000262:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear( B_E );
20000264:	2040      	movs	r0, #64	; 0x40
20000266:	f7ff ff5d 	bl	20000124 <graphic_ctrl_bit_clear>
*portModer= (0x00005555);
2000026a:	4b1e      	ldr	r3, [pc, #120]	; (200002e4 <graphic_read_controller+0x8c>)
2000026c:	4a1e      	ldr	r2, [pc, #120]	; (200002e8 <graphic_read_controller+0x90>)
2000026e:	601a      	str	r2, [r3, #0]
*portOdrLow = (*portOdrLow | 0x03); //turns on RS and RW
20000270:	4a1e      	ldr	r2, [pc, #120]	; (200002ec <graphic_read_controller+0x94>)
20000272:	4b1e      	ldr	r3, [pc, #120]	; (200002ec <graphic_read_controller+0x94>)
20000274:	781b      	ldrb	r3, [r3, #0]
20000276:	b2db      	uxtb	r3, r3
20000278:	2103      	movs	r1, #3
2000027a:	430b      	orrs	r3, r1
2000027c:	b2db      	uxtb	r3, r3
2000027e:	7013      	strb	r3, [r2, #0]
select_controller(controller);
20000280:	1dfb      	adds	r3, r7, #7
20000282:	781b      	ldrb	r3, [r3, #0]
20000284:	0018      	movs	r0, r3
20000286:	f7ff ff79 	bl	2000017c <select_controller>
delay_500ns();
2000028a:	f7ff fee7 	bl	2000005c <delay_500ns>
graphic_ctrl_bit_set(B_E);
2000028e:	2040      	movs	r0, #64	; 0x40
20000290:	f7ff ff1a 	bl	200000c8 <graphic_ctrl_bit_set>
delay_500ns();
20000294:	f7ff fee2 	bl	2000005c <delay_500ns>
unit_8 rv = *portIdrHigh;
20000298:	4a15      	ldr	r2, [pc, #84]	; (200002f0 <graphic_read_controller+0x98>)
2000029a:	230f      	movs	r3, #15
2000029c:	18fb      	adds	r3, r7, r3
2000029e:	7812      	ldrb	r2, [r2, #0]
200002a0:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
200002a2:	2040      	movs	r0, #64	; 0x40
200002a4:	f7ff ff3e 	bl	20000124 <graphic_ctrl_bit_clear>
*portModer= (0x55555555);
200002a8:	4b0e      	ldr	r3, [pc, #56]	; (200002e4 <graphic_read_controller+0x8c>)
200002aa:	4a12      	ldr	r2, [pc, #72]	; (200002f4 <graphic_read_controller+0x9c>)
200002ac:	601a      	str	r2, [r3, #0]

	if(controller & B_CS1){
200002ae:	1dfb      	adds	r3, r7, #7
200002b0:	781b      	ldrb	r3, [r3, #0]
200002b2:	2208      	movs	r2, #8
200002b4:	4013      	ands	r3, r2
200002b6:	d004      	beq.n	200002c2 <graphic_read_controller+0x6a>
		select_controller(B_CS1);
200002b8:	2008      	movs	r0, #8
200002ba:	f7ff ff5f 	bl	2000017c <select_controller>
		graphic_wait_ready();
200002be:	f7ff ff8b 	bl	200001d8 <graphic_wait_ready>
	}
	if (controller & B_CS2){
200002c2:	1dfb      	adds	r3, r7, #7
200002c4:	781b      	ldrb	r3, [r3, #0]
200002c6:	2210      	movs	r2, #16
200002c8:	4013      	ands	r3, r2
200002ca:	d004      	beq.n	200002d6 <graphic_read_controller+0x7e>
		select_controller(B_CS2);
200002cc:	2010      	movs	r0, #16
200002ce:	f7ff ff55 	bl	2000017c <select_controller>
		graphic_wait_ready();
200002d2:	f7ff ff81 	bl	200001d8 <graphic_wait_ready>
	}
return rv;
200002d6:	230f      	movs	r3, #15
200002d8:	18fb      	adds	r3, r7, r3
200002da:	781b      	ldrb	r3, [r3, #0]
} 
200002dc:	0018      	movs	r0, r3
200002de:	46bd      	mov	sp, r7
200002e0:	b004      	add	sp, #16
200002e2:	bd80      	pop	{r7, pc}
200002e4:	40021000 	andmi	r1, r2, r0
200002e8:	00005555 	andeq	r5, r0, r5, asr r5
200002ec:	40021014 	andmi	r1, r2, r4, lsl r0
200002f0:	40021011 	andmi	r1, r2, r1, lsl r0
200002f4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002f8 <graphic_read_data>:
unit_8 graphic_read_data(unit_8 controller){
200002f8:	b580      	push	{r7, lr}
200002fa:	b084      	sub	sp, #16
200002fc:	af00      	add	r7, sp, #0
200002fe:	0002      	movs	r2, r0
20000300:	1dfb      	adds	r3, r7, #7
20000302:	701a      	strb	r2, [r3, #0]
	unit_8 rv;
	for(unit_8 i=0;i<2;i++){ //so that it executes it two times
20000304:	230e      	movs	r3, #14
20000306:	18fb      	adds	r3, r7, r3
20000308:	2200      	movs	r2, #0
2000030a:	701a      	strb	r2, [r3, #0]
2000030c:	e03f      	b.n	2000038e <graphic_read_data+0x96>
							 //nessecary for some reason
	
graphic_ctrl_bit_clear( B_E );
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff08 	bl	20000124 <graphic_ctrl_bit_clear>
*portModer= (0x00005555);
20000314:	4b24      	ldr	r3, [pc, #144]	; (200003a8 <graphic_read_data+0xb0>)
20000316:	4a25      	ldr	r2, [pc, #148]	; (200003ac <graphic_read_data+0xb4>)
20000318:	601a      	str	r2, [r3, #0]
*portOdrLow = (*portOdrLow | 0x03); //turns on RS and RW
2000031a:	4a25      	ldr	r2, [pc, #148]	; (200003b0 <graphic_read_data+0xb8>)
2000031c:	4b24      	ldr	r3, [pc, #144]	; (200003b0 <graphic_read_data+0xb8>)
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	b2db      	uxtb	r3, r3
20000322:	2103      	movs	r1, #3
20000324:	430b      	orrs	r3, r1
20000326:	b2db      	uxtb	r3, r3
20000328:	7013      	strb	r3, [r2, #0]
select_controller(controller);
2000032a:	1dfb      	adds	r3, r7, #7
2000032c:	781b      	ldrb	r3, [r3, #0]
2000032e:	0018      	movs	r0, r3
20000330:	f7ff ff24 	bl	2000017c <select_controller>
delay_500ns();
20000334:	f7ff fe92 	bl	2000005c <delay_500ns>
graphic_ctrl_bit_set(B_E);
20000338:	2040      	movs	r0, #64	; 0x40
2000033a:	f7ff fec5 	bl	200000c8 <graphic_ctrl_bit_set>
delay_500ns();
2000033e:	f7ff fe8d 	bl	2000005c <delay_500ns>

rv = *portIdrHigh;
20000342:	4a1c      	ldr	r2, [pc, #112]	; (200003b4 <graphic_read_data+0xbc>)
20000344:	230f      	movs	r3, #15
20000346:	18fb      	adds	r3, r7, r3
20000348:	7812      	ldrb	r2, [r2, #0]
2000034a:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
2000034c:	2040      	movs	r0, #64	; 0x40
2000034e:	f7ff fee9 	bl	20000124 <graphic_ctrl_bit_clear>
*portModer= (0x55555555);
20000352:	4b15      	ldr	r3, [pc, #84]	; (200003a8 <graphic_read_data+0xb0>)
20000354:	4a18      	ldr	r2, [pc, #96]	; (200003b8 <graphic_read_data+0xc0>)
20000356:	601a      	str	r2, [r3, #0]

	if(controller & B_CS1){
20000358:	1dfb      	adds	r3, r7, #7
2000035a:	781b      	ldrb	r3, [r3, #0]
2000035c:	2208      	movs	r2, #8
2000035e:	4013      	ands	r3, r2
20000360:	d004      	beq.n	2000036c <graphic_read_data+0x74>
		select_controller(B_CS1);
20000362:	2008      	movs	r0, #8
20000364:	f7ff ff0a 	bl	2000017c <select_controller>
		graphic_wait_ready();
20000368:	f7ff ff36 	bl	200001d8 <graphic_wait_ready>
	}
	if (controller & B_CS2){
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	781b      	ldrb	r3, [r3, #0]
20000370:	2210      	movs	r2, #16
20000372:	4013      	ands	r3, r2
20000374:	d004      	beq.n	20000380 <graphic_read_data+0x88>
		select_controller(B_CS2);
20000376:	2010      	movs	r0, #16
20000378:	f7ff ff00 	bl	2000017c <select_controller>
		graphic_wait_ready();
2000037c:	f7ff ff2c 	bl	200001d8 <graphic_wait_ready>
	for(unit_8 i=0;i<2;i++){ //so that it executes it two times
20000380:	230e      	movs	r3, #14
20000382:	18fb      	adds	r3, r7, r3
20000384:	781a      	ldrb	r2, [r3, #0]
20000386:	230e      	movs	r3, #14
20000388:	18fb      	adds	r3, r7, r3
2000038a:	3201      	adds	r2, #1
2000038c:	701a      	strb	r2, [r3, #0]
2000038e:	230e      	movs	r3, #14
20000390:	18fb      	adds	r3, r7, r3
20000392:	781b      	ldrb	r3, [r3, #0]
20000394:	2b01      	cmp	r3, #1
20000396:	d9ba      	bls.n	2000030e <graphic_read_data+0x16>
	}
	
	}
return rv;
20000398:	230f      	movs	r3, #15
2000039a:	18fb      	adds	r3, r7, r3
2000039c:	781b      	ldrb	r3, [r3, #0]
	
	}
2000039e:	0018      	movs	r0, r3
200003a0:	46bd      	mov	sp, r7
200003a2:	b004      	add	sp, #16
200003a4:	bd80      	pop	{r7, pc}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	40021000 	andmi	r1, r2, r0
200003ac:	00005555 	andeq	r5, r0, r5, asr r5
200003b0:	40021014 	andmi	r1, r2, r4, lsl r0
200003b4:	40021011 	andmi	r1, r2, r1, lsl r0
200003b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003bc <graphic_write>:

void graphic_write(unit_8 value, unit_8 controller){ 
200003bc:	b580      	push	{r7, lr}
200003be:	b082      	sub	sp, #8
200003c0:	af00      	add	r7, sp, #0
200003c2:	0002      	movs	r2, r0
200003c4:	1dfb      	adds	r3, r7, #7
200003c6:	701a      	strb	r2, [r3, #0]
200003c8:	1dbb      	adds	r3, r7, #6
200003ca:	1c0a      	adds	r2, r1, #0
200003cc:	701a      	strb	r2, [r3, #0]
	
	*portOdrHigh = value;
200003ce:	4a13      	ldr	r2, [pc, #76]	; (2000041c <graphic_write+0x60>)
200003d0:	1dfb      	adds	r3, r7, #7
200003d2:	781b      	ldrb	r3, [r3, #0]
200003d4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200003d6:	1dbb      	adds	r3, r7, #6
200003d8:	781b      	ldrb	r3, [r3, #0]
200003da:	0018      	movs	r0, r3
200003dc:	f7ff fece 	bl	2000017c <select_controller>
	delay_500ns();
200003e0:	f7ff fe3c 	bl	2000005c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200003e4:	2040      	movs	r0, #64	; 0x40
200003e6:	f7ff fe6f 	bl	200000c8 <graphic_ctrl_bit_set>
	delay_500ns();
200003ea:	f7ff fe37 	bl	2000005c <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200003ee:	2040      	movs	r0, #64	; 0x40
200003f0:	f7ff fe98 	bl	20000124 <graphic_ctrl_bit_clear>
	
	select_controller(controller);
200003f4:	1dbb      	adds	r3, r7, #6
200003f6:	781b      	ldrb	r3, [r3, #0]
200003f8:	0018      	movs	r0, r3
200003fa:	f7ff febf 	bl	2000017c <select_controller>
	graphic_wait_ready();
200003fe:	f7ff feeb 	bl	200001d8 <graphic_wait_ready>

	*portOdrHigh=0x00;
20000402:	4b06      	ldr	r3, [pc, #24]	; (2000041c <graphic_write+0x60>)
20000404:	2200      	movs	r2, #0
20000406:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000408:	2040      	movs	r0, #64	; 0x40
2000040a:	f7ff fe5d 	bl	200000c8 <graphic_ctrl_bit_set>
	select_controller(0x00);
2000040e:	2000      	movs	r0, #0
20000410:	f7ff feb4 	bl	2000017c <select_controller>
		
	}
20000414:	46c0      	nop			; (mov r8, r8)
20000416:	46bd      	mov	sp, r7
20000418:	b002      	add	sp, #8
2000041a:	bd80      	pop	{r7, pc}
2000041c:	40021015 	andmi	r1, r2, r5, lsl r0

20000420 <graphic_write_command>:
void graphic_write_command(unit_8 cmd, unit_8 controller){
20000420:	b580      	push	{r7, lr}
20000422:	b082      	sub	sp, #8
20000424:	af00      	add	r7, sp, #0
20000426:	0002      	movs	r2, r0
20000428:	1dfb      	adds	r3, r7, #7
2000042a:	701a      	strb	r2, [r3, #0]
2000042c:	1dbb      	adds	r3, r7, #6
2000042e:	1c0a      	adds	r2, r1, #0
20000430:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
20000432:	2040      	movs	r0, #64	; 0x40
20000434:	f7ff fe76 	bl	20000124 <graphic_ctrl_bit_clear>
	//select_controller(controller);
	*portOdrLow = (*portOdrLow & ~0x03); //turns off RS and RW
20000438:	4a09      	ldr	r2, [pc, #36]	; (20000460 <graphic_write_command+0x40>)
2000043a:	4b09      	ldr	r3, [pc, #36]	; (20000460 <graphic_write_command+0x40>)
2000043c:	781b      	ldrb	r3, [r3, #0]
2000043e:	b2db      	uxtb	r3, r3
20000440:	2103      	movs	r1, #3
20000442:	438b      	bics	r3, r1
20000444:	b2db      	uxtb	r3, r3
20000446:	7013      	strb	r3, [r2, #0]
	graphic_write(cmd , controller);
20000448:	1dbb      	adds	r3, r7, #6
2000044a:	781a      	ldrb	r2, [r3, #0]
2000044c:	1dfb      	adds	r3, r7, #7
2000044e:	781b      	ldrb	r3, [r3, #0]
20000450:	0011      	movs	r1, r2
20000452:	0018      	movs	r0, r3
20000454:	f7ff ffb2 	bl	200003bc <graphic_write>
	}
20000458:	46c0      	nop			; (mov r8, r8)
2000045a:	46bd      	mov	sp, r7
2000045c:	b002      	add	sp, #8
2000045e:	bd80      	pop	{r7, pc}
20000460:	40021014 	andmi	r1, r2, r4, lsl r0

20000464 <graphic_write_data>:
void graphic_write_data(unit_8 data, unit_8 controller){
20000464:	b580      	push	{r7, lr}
20000466:	b082      	sub	sp, #8
20000468:	af00      	add	r7, sp, #0
2000046a:	0002      	movs	r2, r0
2000046c:	1dfb      	adds	r3, r7, #7
2000046e:	701a      	strb	r2, [r3, #0]
20000470:	1dbb      	adds	r3, r7, #6
20000472:	1c0a      	adds	r2, r1, #0
20000474:	701a      	strb	r2, [r3, #0]
	
	graphic_ctrl_bit_clear(B_E);
20000476:	2040      	movs	r0, #64	; 0x40
20000478:	f7ff fe54 	bl	20000124 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000047c:	1dbb      	adds	r3, r7, #6
2000047e:	781b      	ldrb	r3, [r3, #0]
20000480:	0018      	movs	r0, r3
20000482:	f7ff fe7b 	bl	2000017c <select_controller>
	*portOdrLow = ((*portOdrLow & ~0x02)| 0x01); //turns off RW and RS on
20000486:	4a0c      	ldr	r2, [pc, #48]	; (200004b8 <graphic_write_data+0x54>)
20000488:	4b0b      	ldr	r3, [pc, #44]	; (200004b8 <graphic_write_data+0x54>)
2000048a:	781b      	ldrb	r3, [r3, #0]
2000048c:	b2db      	uxtb	r3, r3
2000048e:	b25b      	sxtb	r3, r3
20000490:	2103      	movs	r1, #3
20000492:	438b      	bics	r3, r1
20000494:	b25b      	sxtb	r3, r3
20000496:	2101      	movs	r1, #1
20000498:	430b      	orrs	r3, r1
2000049a:	b25b      	sxtb	r3, r3
2000049c:	b2db      	uxtb	r3, r3
2000049e:	7013      	strb	r3, [r2, #0]
	graphic_write(data , controller);
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	781a      	ldrb	r2, [r3, #0]
200004a4:	1dfb      	adds	r3, r7, #7
200004a6:	781b      	ldrb	r3, [r3, #0]
200004a8:	0011      	movs	r1, r2
200004aa:	0018      	movs	r0, r3
200004ac:	f7ff ff86 	bl	200003bc <graphic_write>
	}
200004b0:	46c0      	nop			; (mov r8, r8)
200004b2:	46bd      	mov	sp, r7
200004b4:	b002      	add	sp, #8
200004b6:	bd80      	pop	{r7, pc}
200004b8:	40021014 	andmi	r1, r2, r4, lsl r0

200004bc <graphic_clear_screen>:

void graphic_clear_screen(){
200004bc:	b580      	push	{r7, lr}
200004be:	b082      	sub	sp, #8
200004c0:	af00      	add	r7, sp, #0
	
	graphic_write_command(LCD_set_page,B_CS1|B_CS2);
200004c2:	2118      	movs	r1, #24
200004c4:	20b8      	movs	r0, #184	; 0xb8
200004c6:	f7ff ffab 	bl	20000420 <graphic_write_command>
	graphic_write_command(LCD_set_addr,B_CS1|B_CS2);
200004ca:	2118      	movs	r1, #24
200004cc:	2040      	movs	r0, #64	; 0x40
200004ce:	f7ff ffa7 	bl	20000420 <graphic_write_command>
	for(unit_8 i=0;i<7;i++){
200004d2:	1dfb      	adds	r3, r7, #7
200004d4:	2200      	movs	r2, #0
200004d6:	701a      	strb	r2, [r3, #0]
200004d8:	e028      	b.n	2000052c <graphic_clear_screen+0x70>
		graphic_write_command(LCD_set_page | i,B_CS1|B_CS2);
200004da:	1dfb      	adds	r3, r7, #7
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	2248      	movs	r2, #72	; 0x48
200004e0:	4252      	negs	r2, r2
200004e2:	4313      	orrs	r3, r2
200004e4:	b2db      	uxtb	r3, r3
200004e6:	2118      	movs	r1, #24
200004e8:	0018      	movs	r0, r3
200004ea:	f7ff ff99 	bl	20000420 <graphic_write_command>
		for(unit_8 j=0;j<63;j++){
200004ee:	1dbb      	adds	r3, r7, #6
200004f0:	2200      	movs	r2, #0
200004f2:	701a      	strb	r2, [r3, #0]
200004f4:	e011      	b.n	2000051a <graphic_clear_screen+0x5e>
			graphic_write_command(LCD_set_addr | j,B_CS1|B_CS2);
200004f6:	1dbb      	adds	r3, r7, #6
200004f8:	781b      	ldrb	r3, [r3, #0]
200004fa:	2240      	movs	r2, #64	; 0x40
200004fc:	4313      	orrs	r3, r2
200004fe:	b2db      	uxtb	r3, r3
20000500:	2118      	movs	r1, #24
20000502:	0018      	movs	r0, r3
20000504:	f7ff ff8c 	bl	20000420 <graphic_write_command>
			graphic_write_data(0,B_CS1|B_CS2);
20000508:	2118      	movs	r1, #24
2000050a:	2000      	movs	r0, #0
2000050c:	f7ff ffaa 	bl	20000464 <graphic_write_data>
		for(unit_8 j=0;j<63;j++){
20000510:	1dbb      	adds	r3, r7, #6
20000512:	781a      	ldrb	r2, [r3, #0]
20000514:	1dbb      	adds	r3, r7, #6
20000516:	3201      	adds	r2, #1
20000518:	701a      	strb	r2, [r3, #0]
2000051a:	1dbb      	adds	r3, r7, #6
2000051c:	781b      	ldrb	r3, [r3, #0]
2000051e:	2b3e      	cmp	r3, #62	; 0x3e
20000520:	d9e9      	bls.n	200004f6 <graphic_clear_screen+0x3a>
	for(unit_8 i=0;i<7;i++){
20000522:	1dfb      	adds	r3, r7, #7
20000524:	781a      	ldrb	r2, [r3, #0]
20000526:	1dfb      	adds	r3, r7, #7
20000528:	3201      	adds	r2, #1
2000052a:	701a      	strb	r2, [r3, #0]
2000052c:	1dfb      	adds	r3, r7, #7
2000052e:	781b      	ldrb	r3, [r3, #0]
20000530:	2b06      	cmp	r3, #6
20000532:	d9d2      	bls.n	200004da <graphic_clear_screen+0x1e>
		}
	}
}
20000534:	46c0      	nop			; (mov r8, r8)
20000536:	46bd      	mov	sp, r7
20000538:	b002      	add	sp, #8
2000053a:	bd80      	pop	{r7, pc}

2000053c <lcd_set_data>:
void lcd_set_data(unit_8 page,unit_8 adress,unit_8 data){
2000053c:	b590      	push	{r4, r7, lr}
2000053e:	b085      	sub	sp, #20
20000540:	af00      	add	r7, sp, #0
20000542:	0004      	movs	r4, r0
20000544:	0008      	movs	r0, r1
20000546:	0011      	movs	r1, r2
20000548:	1dfb      	adds	r3, r7, #7
2000054a:	1c22      	adds	r2, r4, #0
2000054c:	701a      	strb	r2, [r3, #0]
2000054e:	1dbb      	adds	r3, r7, #6
20000550:	1c02      	adds	r2, r0, #0
20000552:	701a      	strb	r2, [r3, #0]
20000554:	1d7b      	adds	r3, r7, #5
20000556:	1c0a      	adds	r2, r1, #0
20000558:	701a      	strb	r2, [r3, #0]
	unit_8 cs = B_CS1;
2000055a:	230f      	movs	r3, #15
2000055c:	18fb      	adds	r3, r7, r3
2000055e:	2208      	movs	r2, #8
20000560:	701a      	strb	r2, [r3, #0]
	if(adress>64){
20000562:	1dbb      	adds	r3, r7, #6
20000564:	781b      	ldrb	r3, [r3, #0]
20000566:	2b40      	cmp	r3, #64	; 0x40
20000568:	d903      	bls.n	20000572 <lcd_set_data+0x36>
		cs= B_CS2;
2000056a:	230f      	movs	r3, #15
2000056c:	18fb      	adds	r3, r7, r3
2000056e:	2210      	movs	r2, #16
20000570:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_set_addr|(adress % 64),cs);
20000572:	1dbb      	adds	r3, r7, #6
20000574:	781b      	ldrb	r3, [r3, #0]
20000576:	223f      	movs	r2, #63	; 0x3f
20000578:	4013      	ands	r3, r2
2000057a:	b2db      	uxtb	r3, r3
2000057c:	2240      	movs	r2, #64	; 0x40
2000057e:	4313      	orrs	r3, r2
20000580:	b2da      	uxtb	r2, r3
20000582:	230f      	movs	r3, #15
20000584:	18fb      	adds	r3, r7, r3
20000586:	781b      	ldrb	r3, [r3, #0]
20000588:	0019      	movs	r1, r3
2000058a:	0010      	movs	r0, r2
2000058c:	f7ff ff48 	bl	20000420 <graphic_write_command>
	graphic_write_command(LCD_set_page|page,cs);
20000590:	1dfb      	adds	r3, r7, #7
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	2248      	movs	r2, #72	; 0x48
20000596:	4252      	negs	r2, r2
20000598:	4313      	orrs	r3, r2
2000059a:	b2da      	uxtb	r2, r3
2000059c:	230f      	movs	r3, #15
2000059e:	18fb      	adds	r3, r7, r3
200005a0:	781b      	ldrb	r3, [r3, #0]
200005a2:	0019      	movs	r1, r3
200005a4:	0010      	movs	r0, r2
200005a6:	f7ff ff3b 	bl	20000420 <graphic_write_command>
	graphic_write_data(data,cs);
200005aa:	230f      	movs	r3, #15
200005ac:	18fb      	adds	r3, r7, r3
200005ae:	781a      	ldrb	r2, [r3, #0]
200005b0:	1d7b      	adds	r3, r7, #5
200005b2:	781b      	ldrb	r3, [r3, #0]
200005b4:	0011      	movs	r1, r2
200005b6:	0018      	movs	r0, r3
200005b8:	f7ff ff54 	bl	20000464 <graphic_write_data>
	}
200005bc:	46c0      	nop			; (mov r8, r8)
200005be:	46bd      	mov	sp, r7
200005c0:	b005      	add	sp, #20
200005c2:	bd90      	pop	{r4, r7, pc}

200005c4 <lcd_read_data>:
unit_8 lcd_read_data(unit_8 page,unit_8 adress){
200005c4:	b580      	push	{r7, lr}
200005c6:	b084      	sub	sp, #16
200005c8:	af00      	add	r7, sp, #0
200005ca:	0002      	movs	r2, r0
200005cc:	1dfb      	adds	r3, r7, #7
200005ce:	701a      	strb	r2, [r3, #0]
200005d0:	1dbb      	adds	r3, r7, #6
200005d2:	1c0a      	adds	r2, r1, #0
200005d4:	701a      	strb	r2, [r3, #0]
	unit_8 cs = B_CS1;
200005d6:	230f      	movs	r3, #15
200005d8:	18fb      	adds	r3, r7, r3
200005da:	2208      	movs	r2, #8
200005dc:	701a      	strb	r2, [r3, #0]
	if(adress>64){
200005de:	1dbb      	adds	r3, r7, #6
200005e0:	781b      	ldrb	r3, [r3, #0]
200005e2:	2b40      	cmp	r3, #64	; 0x40
200005e4:	d903      	bls.n	200005ee <lcd_read_data+0x2a>
		cs= B_CS2;
200005e6:	230f      	movs	r3, #15
200005e8:	18fb      	adds	r3, r7, r3
200005ea:	2210      	movs	r2, #16
200005ec:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_set_addr|(adress % 64),cs);
200005ee:	1dbb      	adds	r3, r7, #6
200005f0:	781b      	ldrb	r3, [r3, #0]
200005f2:	223f      	movs	r2, #63	; 0x3f
200005f4:	4013      	ands	r3, r2
200005f6:	b2db      	uxtb	r3, r3
200005f8:	2240      	movs	r2, #64	; 0x40
200005fa:	4313      	orrs	r3, r2
200005fc:	b2da      	uxtb	r2, r3
200005fe:	230f      	movs	r3, #15
20000600:	18fb      	adds	r3, r7, r3
20000602:	781b      	ldrb	r3, [r3, #0]
20000604:	0019      	movs	r1, r3
20000606:	0010      	movs	r0, r2
20000608:	f7ff ff0a 	bl	20000420 <graphic_write_command>
	graphic_write_command(LCD_set_page|page,cs);
2000060c:	1dfb      	adds	r3, r7, #7
2000060e:	781b      	ldrb	r3, [r3, #0]
20000610:	2248      	movs	r2, #72	; 0x48
20000612:	4252      	negs	r2, r2
20000614:	4313      	orrs	r3, r2
20000616:	b2da      	uxtb	r2, r3
20000618:	230f      	movs	r3, #15
2000061a:	18fb      	adds	r3, r7, r3
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	0019      	movs	r1, r3
20000620:	0010      	movs	r0, r2
20000622:	f7ff fefd 	bl	20000420 <graphic_write_command>
	return graphic_read_data(cs);
20000626:	230f      	movs	r3, #15
20000628:	18fb      	adds	r3, r7, r3
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	0018      	movs	r0, r3
2000062e:	f7ff fe63 	bl	200002f8 <graphic_read_data>
20000632:	0003      	movs	r3, r0
	}
20000634:	0018      	movs	r0, r3
20000636:	46bd      	mov	sp, r7
20000638:	b004      	add	sp, #16
2000063a:	bd80      	pop	{r7, pc}

2000063c <pixel>:


void pixel(unit_8 x,unit_8 y, unit_8 set){
2000063c:	b590      	push	{r4, r7, lr}
2000063e:	b087      	sub	sp, #28
20000640:	af00      	add	r7, sp, #0
20000642:	0004      	movs	r4, r0
20000644:	0008      	movs	r0, r1
20000646:	0011      	movs	r1, r2
20000648:	1dfb      	adds	r3, r7, #7
2000064a:	1c22      	adds	r2, r4, #0
2000064c:	701a      	strb	r2, [r3, #0]
2000064e:	1dbb      	adds	r3, r7, #6
20000650:	1c02      	adds	r2, r0, #0
20000652:	701a      	strb	r2, [r3, #0]
20000654:	1d7b      	adds	r3, r7, #5
20000656:	1c0a      	adds	r2, r1, #0
20000658:	701a      	strb	r2, [r3, #0]
	if((x<1)||(y<1)||(x>128)||(y>64)) return;
2000065a:	1dfb      	adds	r3, r7, #7
2000065c:	781b      	ldrb	r3, [r3, #0]
2000065e:	2b00      	cmp	r3, #0
20000660:	d100      	bne.n	20000664 <pixel+0x28>
20000662:	e09e      	b.n	200007a2 <pixel+0x166>
20000664:	1dbb      	adds	r3, r7, #6
20000666:	781b      	ldrb	r3, [r3, #0]
20000668:	2b00      	cmp	r3, #0
2000066a:	d100      	bne.n	2000066e <pixel+0x32>
2000066c:	e099      	b.n	200007a2 <pixel+0x166>
2000066e:	1dfb      	adds	r3, r7, #7
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	2b80      	cmp	r3, #128	; 0x80
20000674:	d900      	bls.n	20000678 <pixel+0x3c>
20000676:	e094      	b.n	200007a2 <pixel+0x166>
20000678:	1dbb      	adds	r3, r7, #6
2000067a:	781b      	ldrb	r3, [r3, #0]
2000067c:	2b40      	cmp	r3, #64	; 0x40
2000067e:	d900      	bls.n	20000682 <pixel+0x46>
20000680:	e08f      	b.n	200007a2 <pixel+0x166>
	unit_8 mask, controller,c;
	int index;
	index = (y-1)/8;
20000682:	1dbb      	adds	r3, r7, #6
20000684:	781b      	ldrb	r3, [r3, #0]
20000686:	3b01      	subs	r3, #1
20000688:	2b00      	cmp	r3, #0
2000068a:	da00      	bge.n	2000068e <pixel+0x52>
2000068c:	3307      	adds	r3, #7
2000068e:	10db      	asrs	r3, r3, #3
20000690:	613b      	str	r3, [r7, #16]
	mask = 1 << ((y-1)%8);
20000692:	1dbb      	adds	r3, r7, #6
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	3b01      	subs	r3, #1
20000698:	4a44      	ldr	r2, [pc, #272]	; (200007ac <pixel+0x170>)
2000069a:	4013      	ands	r3, r2
2000069c:	d504      	bpl.n	200006a8 <pixel+0x6c>
2000069e:	3b01      	subs	r3, #1
200006a0:	2208      	movs	r2, #8
200006a2:	4252      	negs	r2, r2
200006a4:	4313      	orrs	r3, r2
200006a6:	3301      	adds	r3, #1
200006a8:	001a      	movs	r2, r3
200006aa:	2301      	movs	r3, #1
200006ac:	4093      	lsls	r3, r2
200006ae:	001a      	movs	r2, r3
200006b0:	2317      	movs	r3, #23
200006b2:	18fb      	adds	r3, r7, r3
200006b4:	701a      	strb	r2, [r3, #0]
	if(set == 0){ mask = ~mask;
200006b6:	1d7b      	adds	r3, r7, #5
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	2b00      	cmp	r3, #0
200006bc:	d106      	bne.n	200006cc <pixel+0x90>
200006be:	2317      	movs	r3, #23
200006c0:	18fb      	adds	r3, r7, r3
200006c2:	2217      	movs	r2, #23
200006c4:	18ba      	adds	r2, r7, r2
200006c6:	7812      	ldrb	r2, [r2, #0]
200006c8:	43d2      	mvns	r2, r2
200006ca:	701a      	strb	r2, [r3, #0]
	}
	
	if(x >64){
200006cc:	1dfb      	adds	r3, r7, #7
200006ce:	781b      	ldrb	r3, [r3, #0]
200006d0:	2b40      	cmp	r3, #64	; 0x40
200006d2:	d909      	bls.n	200006e8 <pixel+0xac>
		controller =B_CS2;
200006d4:	2316      	movs	r3, #22
200006d6:	18fb      	adds	r3, r7, r3
200006d8:	2210      	movs	r2, #16
200006da:	701a      	strb	r2, [r3, #0]
		x =x-65;
200006dc:	1dfb      	adds	r3, r7, #7
200006de:	1dfa      	adds	r2, r7, #7
200006e0:	7812      	ldrb	r2, [r2, #0]
200006e2:	3a41      	subs	r2, #65	; 0x41
200006e4:	701a      	strb	r2, [r3, #0]
200006e6:	e008      	b.n	200006fa <pixel+0xbe>
	} else {
		controller =B_CS1;
200006e8:	2316      	movs	r3, #22
200006ea:	18fb      	adds	r3, r7, r3
200006ec:	2208      	movs	r2, #8
200006ee:	701a      	strb	r2, [r3, #0]
		x =x-1;
200006f0:	1dfb      	adds	r3, r7, #7
200006f2:	1dfa      	adds	r2, r7, #7
200006f4:	7812      	ldrb	r2, [r2, #0]
200006f6:	3a01      	subs	r2, #1
200006f8:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_set_addr |x,controller );
200006fa:	1dfb      	adds	r3, r7, #7
200006fc:	781b      	ldrb	r3, [r3, #0]
200006fe:	2240      	movs	r2, #64	; 0x40
20000700:	4313      	orrs	r3, r2
20000702:	b2da      	uxtb	r2, r3
20000704:	2316      	movs	r3, #22
20000706:	18fb      	adds	r3, r7, r3
20000708:	781b      	ldrb	r3, [r3, #0]
2000070a:	0019      	movs	r1, r3
2000070c:	0010      	movs	r0, r2
2000070e:	f7ff fe87 	bl	20000420 <graphic_write_command>
	graphic_write_command(LCD_set_page |index,controller );
20000712:	693b      	ldr	r3, [r7, #16]
20000714:	b25b      	sxtb	r3, r3
20000716:	2248      	movs	r2, #72	; 0x48
20000718:	4252      	negs	r2, r2
2000071a:	4313      	orrs	r3, r2
2000071c:	b25b      	sxtb	r3, r3
2000071e:	b2da      	uxtb	r2, r3
20000720:	2316      	movs	r3, #22
20000722:	18fb      	adds	r3, r7, r3
20000724:	781b      	ldrb	r3, [r3, #0]
20000726:	0019      	movs	r1, r3
20000728:	0010      	movs	r0, r2
2000072a:	f7ff fe79 	bl	20000420 <graphic_write_command>

	c =graphic_read_data(controller);
2000072e:	230f      	movs	r3, #15
20000730:	18fc      	adds	r4, r7, r3
20000732:	2316      	movs	r3, #22
20000734:	18fb      	adds	r3, r7, r3
20000736:	781b      	ldrb	r3, [r3, #0]
20000738:	0018      	movs	r0, r3
2000073a:	f7ff fddd 	bl	200002f8 <graphic_read_data>
2000073e:	0003      	movs	r3, r0
20000740:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_set_addr |x,controller);
20000742:	1dfb      	adds	r3, r7, #7
20000744:	781b      	ldrb	r3, [r3, #0]
20000746:	2240      	movs	r2, #64	; 0x40
20000748:	4313      	orrs	r3, r2
2000074a:	b2da      	uxtb	r2, r3
2000074c:	2316      	movs	r3, #22
2000074e:	18fb      	adds	r3, r7, r3
20000750:	781b      	ldrb	r3, [r3, #0]
20000752:	0019      	movs	r1, r3
20000754:	0010      	movs	r0, r2
20000756:	f7ff fe63 	bl	20000420 <graphic_write_command>
	if(set){mask = mask | c;
2000075a:	1d7b      	adds	r3, r7, #5
2000075c:	781b      	ldrb	r3, [r3, #0]
2000075e:	2b00      	cmp	r3, #0
20000760:	d00a      	beq.n	20000778 <pixel+0x13c>
20000762:	2317      	movs	r3, #23
20000764:	18fb      	adds	r3, r7, r3
20000766:	2217      	movs	r2, #23
20000768:	18b9      	adds	r1, r7, r2
2000076a:	220f      	movs	r2, #15
2000076c:	18ba      	adds	r2, r7, r2
2000076e:	7809      	ldrb	r1, [r1, #0]
20000770:	7812      	ldrb	r2, [r2, #0]
20000772:	430a      	orrs	r2, r1
20000774:	701a      	strb	r2, [r3, #0]
20000776:	e009      	b.n	2000078c <pixel+0x150>
	}
	else   {mask = mask & c;
20000778:	2317      	movs	r3, #23
2000077a:	18fb      	adds	r3, r7, r3
2000077c:	2217      	movs	r2, #23
2000077e:	18ba      	adds	r2, r7, r2
20000780:	210f      	movs	r1, #15
20000782:	1879      	adds	r1, r7, r1
20000784:	7812      	ldrb	r2, [r2, #0]
20000786:	7809      	ldrb	r1, [r1, #0]
20000788:	400a      	ands	r2, r1
2000078a:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask,controller);
2000078c:	2316      	movs	r3, #22
2000078e:	18fb      	adds	r3, r7, r3
20000790:	781a      	ldrb	r2, [r3, #0]
20000792:	2317      	movs	r3, #23
20000794:	18fb      	adds	r3, r7, r3
20000796:	781b      	ldrb	r3, [r3, #0]
20000798:	0011      	movs	r1, r2
2000079a:	0018      	movs	r0, r3
2000079c:	f7ff fe62 	bl	20000464 <graphic_write_data>
200007a0:	e000      	b.n	200007a4 <pixel+0x168>
	if((x<1)||(y<1)||(x>128)||(y>64)) return;
200007a2:	46c0      	nop			; (mov r8, r8)
}
200007a4:	46bd      	mov	sp, r7
200007a6:	b007      	add	sp, #28
200007a8:	bd90      	pop	{r4, r7, pc}
200007aa:	46c0      	nop			; (mov r8, r8)
200007ac:	80000007 	andhi	r0, r0, r7

200007b0 <init_app>:

void init_app(void){
200007b0:	b580      	push	{r7, lr}
200007b2:	af00      	add	r7, sp, #0
	*portModer  = 0x55555555;
200007b4:	4b02      	ldr	r3, [pc, #8]	; (200007c0 <init_app+0x10>)
200007b6:	4a03      	ldr	r2, [pc, #12]	; (200007c4 <init_app+0x14>)
200007b8:	601a      	str	r2, [r3, #0]
}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	46bd      	mov	sp, r7
200007be:	bd80      	pop	{r7, pc}
200007c0:	40021000 	andmi	r1, r2, r0
200007c4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007c8 <graphic_init>:
void graphic_init(){
200007c8:	b580      	push	{r7, lr}
200007ca:	af00      	add	r7, sp, #0

	graphic_ctrl_bit_set(B_E);
200007cc:	2040      	movs	r0, #64	; 0x40
200007ce:	f7ff fc7b 	bl	200000c8 <graphic_ctrl_bit_set>
	delay_mikro(10);
200007d2:	200a      	movs	r0, #10
200007d4:	f7ff fc4c 	bl	20000070 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
200007d8:	2078      	movs	r0, #120	; 0x78
200007da:	f7ff fca3 	bl	20000124 <graphic_ctrl_bit_clear>
	delay_milli(30);
200007de:	201e      	movs	r0, #30
200007e0:	f7ff fc5a 	bl	20000098 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200007e4:	2020      	movs	r0, #32
200007e6:	f7ff fc6f 	bl	200000c8 <graphic_ctrl_bit_set>
	//delay_milli(100);
	delay_milli(10);
200007ea:	200a      	movs	r0, #10
200007ec:	f7ff fc54 	bl	20000098 <delay_milli>
	graphic_write_command(LCD_OFF,			B_CS1|B_CS2);//LCD off
200007f0:	2118      	movs	r1, #24
200007f2:	203e      	movs	r0, #62	; 0x3e
200007f4:	f7ff fe14 	bl	20000420 <graphic_write_command>
	graphic_write_command(LCD_ON,			B_CS1|B_CS2);//LCD on
200007f8:	2118      	movs	r1, #24
200007fa:	203f      	movs	r0, #63	; 0x3f
200007fc:	f7ff fe10 	bl	20000420 <graphic_write_command>
	graphic_write_command(LCD_disp_start,	B_CS1|B_CS2);//start=0
20000800:	2118      	movs	r1, #24
20000802:	20c0      	movs	r0, #192	; 0xc0
20000804:	f7ff fe0c 	bl	20000420 <graphic_write_command>
	graphic_write_command(LCD_set_addr,		B_CS1|B_CS2);//startadress =0
20000808:	2118      	movs	r1, #24
2000080a:	2040      	movs	r0, #64	; 0x40
2000080c:	f7ff fe08 	bl	20000420 <graphic_write_command>
	graphic_write_command(LCD_set_page,		B_CS1|B_CS2);//page = 0
20000810:	2118      	movs	r1, #24
20000812:	20b8      	movs	r0, #184	; 0xb8
20000814:	f7ff fe04 	bl	20000420 <graphic_write_command>
	select_controller(0x00);
20000818:	2000      	movs	r0, #0
2000081a:	f7ff fcaf 	bl	2000017c <select_controller>
	
	}
2000081e:	46c0      	nop			; (mov r8, r8)
20000820:	46bd      	mov	sp, r7
20000822:	bd80      	pop	{r7, pc}

20000824 <main>:


int main(void){
20000824:	b580      	push	{r7, lr}
20000826:	af00      	add	r7, sp, #0
	init_app();
20000828:	f7ff ffc2 	bl	200007b0 <init_app>
	graphic_init();
2000082c:	f7ff ffcc 	bl	200007c8 <graphic_init>
	
	return 0;
20000830:	2300      	movs	r3, #0
}
20000832:	0018      	movs	r0, r3
20000834:	46bd      	mov	sp, r7
20000836:	bd80      	pop	{r7, pc}

20000838 <STK_CTRL>:
20000838:	e000e010 	and	lr, r0, r0, lsl r0

2000083c <STK_LOAD>:
2000083c:	e000e014 	and	lr, r0, r4, lsl r0

20000840 <STK_VAL>:
20000840:	e000e018 	and	lr, r0, r8, lsl r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000466 	andeq	r0, r0, r6, ror #8
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000005 	andeq	r0, r0, r5
  10:	0001200c 	andeq	r2, r1, ip
	...
  20:	02360200 	eorseq	r0, r6, #0, 4
  24:	26010000 	strcs	r0, [r1], -r0
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	ae080103 	adfgee	f0, f0, f3
  30:	03000000 	movweq	r0, #0
  34:	00da0702 	sbcseq	r0, sl, r2, lsl #14
  38:	04030000 	streq	r0, [r3], #-0
  3c:	0000c807 	andeq	ip, r0, r7, lsl #16
  40:	01b80400 			; <UNDEFINED> instruction: 0x01b80400
  44:	2d010000 	stccs	0, cr0, [r1, #-0]
  48:	20000000 	andcs	r0, r0, r0
  4c:	0000000c 	andeq	r0, r0, ip
  50:	ac059c01 	stcge	12, cr9, [r5], {1}
  54:	01000001 	tsteq	r0, r1
  58:	00001038 	andeq	r1, r0, r8, lsr r0
  5c:	00004c20 	andeq	r4, r0, r0, lsr #24
  60:	069c0100 	ldreq	r0, [ip], r0, lsl #2
  64:	000000bc 	strheq	r0, [r0], -ip
  68:	005c4301 	subseq	r4, ip, r1, lsl #6
  6c:	00122000 	andseq	r2, r2, r0
  70:	9c010000 	stcls	0, cr0, [r1], {-0}
  74:	0001a007 	andeq	sl, r1, r7
  78:	70490100 	subvc	r0, r9, r0, lsl #2
  7c:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
  80:	01000000 	mrseq	r0, (UNDEF: 0)
  84:	0000ad9c 	muleq	r0, ip, sp
  88:	736d0800 	cmnvc	sp, #0, 16
  8c:	ad490100 	stfgee	f0, [r9, #-0]
  90:	02000000 	andeq	r0, r0, #0
  94:	78096c91 	stmdavc	r9, {r0, r4, r7, sl, fp, sp, lr}
  98:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
  9c:	0a000000 	beq	a4 <startup-0x1fffff5c>
  a0:	4a01006a 	bmi	40250 <startup-0x1ffbfdb0>
  a4:	000000ad 	andeq	r0, r0, sp, lsr #1
  a8:	00749102 	rsbseq	r9, r4, r2, lsl #2
  ac:	07040300 	streq	r0, [r4, -r0, lsl #6]
  b0:	000000cd 	andeq	r0, r0, sp, asr #1
  b4:	0001c507 	andeq	ip, r1, r7, lsl #10
  b8:	98500100 	ldmdals	r0, {r8}^
  bc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
  c0:	01000000 	mrseq	r0, (UNDEF: 0)
  c4:	0000ed9c 	muleq	r0, ip, sp
  c8:	736d0800 	cmnvc	sp, #0, 16
  cc:	ad500100 	ldfgee	f0, [r0, #-0]
  d0:	02000000 	andeq	r0, r0, #0
  d4:	a0096c91 	mulge	r9, r1, ip
  d8:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	57010069 	strpl	r0, [r1, -r9, rrx]
  e4:	000000ad 	andeq	r0, r0, sp, lsr #1
  e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
  ec:	01820b00 	orreq	r0, r2, r0, lsl #22
  f0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
  f4:	200000c8 	andcs	r0, r0, r8, asr #1
  f8:	0000005c 	andeq	r0, r0, ip, asr r0
  fc:	011b9c01 	tsteq	fp, r1, lsl #24
 100:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 104:	215e0100 	cmpcs	lr, r0, lsl #2
 108:	02000000 	andeq	r0, r0, #0
 10c:	630a6f91 	movwvs	r6, #44945	; 0xaf91
 110:	215f0100 	cmpcs	pc, r0, lsl #2
 114:	02000000 	andeq	r0, r0, #0
 118:	0b007791 	bleq	1df64 <startup-0x1ffe209c>
 11c:	0000016b 	andeq	r0, r0, fp, ror #2
 120:	01246501 			; <UNDEFINED> instruction: 0x01246501
 124:	00582000 	subseq	r2, r8, r0
 128:	9c010000 	stcls	0, cr0, [r1], {-0}
 12c:	00000149 	andeq	r0, r0, r9, asr #2
 130:	01007808 	tsteq	r0, r8, lsl #16
 134:	00002165 	andeq	r2, r0, r5, ror #2
 138:	6f910200 	svcvs	0x00910200
 13c:	0100630a 	tsteq	r0, sl, lsl #6
 140:	00002166 	andeq	r2, r0, r6, ror #2
 144:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 148:	005a0700 	subseq	r0, sl, r0, lsl #14
 14c:	6d010000 	stcvs	0, cr0, [r1, #-0]
 150:	2000017c 	andcs	r0, r0, ip, ror r1
 154:	0000005a 	andeq	r0, r0, sl, asr r0
 158:	016b9c01 	cmneq	fp, r1, lsl #24
 15c:	73080000 	movwvc	r0, #32768	; 0x8000
 160:	216d0100 	cmncs	sp, r0, lsl #2
 164:	02000000 	andeq	r0, r0, #0
 168:	07007791 			; <UNDEFINED> instruction: 0x07007791
 16c:	000001f2 	strdeq	r0, [r0], -r2
 170:	01d87f01 	bicseq	r7, r8, r1, lsl #30
 174:	00802000 	addeq	r2, r0, r0
 178:	9c010000 	stcls	0, cr0, [r1], {-0}
 17c:	0000018d 	andeq	r0, r0, sp, lsl #3
 180:	0100630a 	tsteq	r0, sl, lsl #6
 184:	00002180 	andeq	r2, r0, r0, lsl #3
 188:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 18c:	00ed0c00 	rsceq	r0, sp, r0, lsl #24
 190:	95010000 	strls	r0, [r1, #-0]
 194:	00000021 	andeq	r0, r0, r1, lsr #32
 198:	20000258 	andcs	r0, r0, r8, asr r2
 19c:	000000a0 	andeq	r0, r0, r0, lsr #1
 1a0:	01c29c01 	biceq	r9, r2, r1, lsl #24
 1a4:	fa0d0000 	blx	3401ac <startup-0x1fcbfe54>
 1a8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ac:	00002195 	muleq	r0, r5, r1
 1b0:	6f910200 	svcvs	0x00910200
 1b4:	0076720a 	rsbseq	r7, r6, sl, lsl #4
 1b8:	00219d01 	eoreq	r9, r1, r1, lsl #26
 1bc:	91020000 	mrsls	r0, (UNDEF: 2)
 1c0:	820c0077 	andhi	r0, ip, #119	; 0x77
 1c4:	01000000 	mrseq	r0, (UNDEF: 0)
 1c8:	000021ab 	andeq	r2, r0, fp, lsr #3
 1cc:	0002f800 	andeq	pc, r2, r0, lsl #16
 1d0:	0000c420 	andeq	ip, r0, r0, lsr #8
 1d4:	0d9c0100 	ldfeqs	f0, [ip]
 1d8:	0d000002 	stceq	0, cr0, [r0, #-8]
 1dc:	000000fa 	strdeq	r0, [r0], -sl
 1e0:	0021ab01 	eoreq	sl, r1, r1, lsl #22
 1e4:	91020000 	mrsls	r0, (UNDEF: 2)
 1e8:	76720a6f 	ldrbtvc	r0, [r2], -pc, ror #20
 1ec:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
 1f0:	02000000 	andeq	r0, r0, #0
 1f4:	04097791 	streq	r7, [r9], #-1937	; 0xfffff86f
 1f8:	94200003 	strtls	r0, [r0], #-3
 1fc:	0a000000 	beq	204 <startup-0x1ffffdfc>
 200:	ad010069 	stcge	0, cr0, [r1, #-420]	; 0xfffffe5c
 204:	00000021 	andeq	r0, r0, r1, lsr #32
 208:	00769102 	rsbseq	r9, r6, r2, lsl #2
 20c:	01e40700 	mvneq	r0, r0, lsl #14
 210:	ca010000 	bgt	40218 <startup-0x1ffbfde8>
 214:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 218:	00000064 	andeq	r0, r0, r4, rrx
 21c:	023f9c01 	eorseq	r9, pc, #256	; 0x100
 220:	540d0000 	strpl	r0, [sp], #-0
 224:	01000000 	mrseq	r0, (UNDEF: 0)
 228:	000021ca 	andeq	r2, r0, sl, asr #3
 22c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 230:	0000fa0d 	andeq	pc, r0, sp, lsl #20
 234:	21ca0100 	biccs	r0, sl, r0, lsl #2
 238:	02000000 	andeq	r0, r0, #0
 23c:	07007691 			; <UNDEFINED> instruction: 0x07007691
 240:	0000006c 	andeq	r0, r0, ip, rrx
 244:	0420db01 	strteq	sp, [r0], #-2817	; 0xfffff4ff
 248:	00442000 	subeq	r2, r4, r0
 24c:	9c010000 	stcls	0, cr0, [r1], {-0}
 250:	00000271 	andeq	r0, r0, r1, ror r2
 254:	646d6308 	strbtvs	r6, [sp], #-776	; 0xfffffcf8
 258:	21db0100 	bicscs	r0, fp, r0, lsl #2
 25c:	02000000 	andeq	r0, r0, #0
 260:	fa0d7791 	blx	35e0ac <startup-0x1fca1f54>
 264:	01000000 	mrseq	r0, (UNDEF: 0)
 268:	000021db 	ldrdeq	r2, [r0], -fp
 26c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 270:	01d10700 	bicseq	r0, r1, r0, lsl #14
 274:	e2010000 	and	r0, r1, #0
 278:	20000464 	andcs	r0, r0, r4, ror #8
 27c:	00000058 	andeq	r0, r0, r8, asr r0
 280:	02a39c01 	adceq	r9, r3, #256	; 0x100
 284:	8f0d0000 	svchi	0x000d0000
 288:	01000000 	mrseq	r0, (UNDEF: 0)
 28c:	000021e2 	andeq	r2, r0, r2, ror #3
 290:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 294:	0000fa0d 	andeq	pc, r0, sp, lsl #20
 298:	21e20100 	mvncs	r0, r0, lsl #2
 29c:	02000000 	andeq	r0, r0, #0
 2a0:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 2a4:	00000205 	andeq	r0, r0, r5, lsl #4
 2a8:	04bcea01 	ldrteq	lr, [ip], #2561	; 0xa01
 2ac:	00802000 	addeq	r2, r0, r0
 2b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2b4:	000002e5 	andeq	r0, r0, r5, ror #5
 2b8:	0004d209 	andeq	sp, r4, r9, lsl #4
 2bc:	00006220 	andeq	r6, r0, r0, lsr #4
 2c0:	00690a00 	rsbeq	r0, r9, r0, lsl #20
 2c4:	0021ee01 	eoreq	lr, r1, r1, lsl #28
 2c8:	91020000 	mrsls	r0, (UNDEF: 2)
 2cc:	04ee0977 	strbteq	r0, [lr], #2423	; 0x977
 2d0:	00342000 	eorseq	r2, r4, r0
 2d4:	6a0a0000 	bvs	2802dc <startup-0x1fd7fd24>
 2d8:	21f00100 	mvnscs	r0, r0, lsl #2
 2dc:	02000000 	andeq	r0, r0, #0
 2e0:	00007691 	muleq	r0, r1, r6
 2e4:	00a10700 	adceq	r0, r1, r0, lsl #14
 2e8:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
 2ec:	2000053c 	andcs	r0, r0, ip, lsr r5
 2f0:	00000088 	andeq	r0, r0, r8, lsl #1
 2f4:	03329c01 	teqeq	r2, #256	; 0x100
 2f8:	000d0000 	andeq	r0, sp, r0
 2fc:	01000000 	mrseq	r0, (UNDEF: 0)
 300:	000021f6 	strdeq	r2, [r0], -r6
 304:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 308:	0000940d 	andeq	r9, r0, sp, lsl #8
 30c:	21f60100 	mvnscs	r0, r0, lsl #2
 310:	02000000 	andeq	r0, r0, #0
 314:	8f0d6691 	svchi	0x000d6691
 318:	01000000 	mrseq	r0, (UNDEF: 0)
 31c:	000021f6 	strdeq	r2, [r0], -r6
 320:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 324:	0073630a 	rsbseq	r6, r3, sl, lsl #6
 328:	0021f701 	eoreq	pc, r1, r1, lsl #14
 32c:	91020000 	mrsls	r0, (UNDEF: 2)
 330:	280c006f 	stmdacs	ip, {r0, r1, r2, r3, r5, r6}
 334:	01000002 	tsteq	r0, r2
 338:	000021ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
 33c:	0005c400 	andeq	ip, r5, r0, lsl #8
 340:	00007820 	andeq	r7, r0, r0, lsr #16
 344:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
 348:	0d000003 	stceq	0, cr0, [r0, #-12]
 34c:	00000000 	andeq	r0, r0, r0
 350:	0021ff01 	eoreq	pc, r1, r1, lsl #30
 354:	91020000 	mrsls	r0, (UNDEF: 2)
 358:	00940d6f 	addseq	r0, r4, pc, ror #26
 35c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
 360:	00000021 	andeq	r0, r0, r1, lsr #32
 364:	0f6e9102 	svceq	0x006e9102
 368:	01007363 	tsteq	r0, r3, ror #6
 36c:	00210100 	eoreq	r0, r1, r0, lsl #2
 370:	91020000 	mrsls	r0, (UNDEF: 2)
 374:	9b100077 	blls	400558 <startup-0x1fbffaa8>
 378:	01000000 	mrseq	r0, (UNDEF: 0)
 37c:	063c010a 	ldrteq	r0, [ip], -sl, lsl #2
 380:	01742000 	cmneq	r4, r0
 384:	9c010000 	stcls	0, cr0, [r1], {-0}
 388:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 38c:	01007811 	tsteq	r0, r1, lsl r8
 390:	0021010a 	eoreq	r0, r1, sl, lsl #2
 394:	91020000 	mrsls	r0, (UNDEF: 2)
 398:	0079115f 	rsbseq	r1, r9, pc, asr r1
 39c:	21010a01 	tstcs	r1, r1, lsl #20
 3a0:	02000000 	andeq	r0, r0, #0
 3a4:	73115e91 	tstvc	r1, #2320	; 0x910
 3a8:	01007465 	tsteq	r0, r5, ror #8
 3ac:	0021010a 	eoreq	r0, r1, sl, lsl #2
 3b0:	91020000 	mrsls	r0, (UNDEF: 2)
 3b4:	01c0125d 	biceq	r1, r0, sp, asr r2
 3b8:	0c010000 	stceq	0, cr0, [r1], {-0}
 3bc:	00002101 	andeq	r2, r0, r1, lsl #2
 3c0:	6f910200 	svcvs	0x00910200
 3c4:	0000fa12 	andeq	pc, r0, r2, lsl sl	; <UNPREDICTABLE>
 3c8:	010c0100 	mrseq	r0, (UNDEF: 28)
 3cc:	00000021 	andeq	r0, r0, r1, lsr #32
 3d0:	0f6e9102 	svceq	0x006e9102
 3d4:	0c010063 	stceq	0, cr0, [r1], {99}	; 0x63
 3d8:	00002101 	andeq	r2, r0, r1, lsl #2
 3dc:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 3e0:	00022212 	andeq	r2, r2, r2, lsl r2
 3e4:	010d0100 	mrseq	r0, (UNDEF: 29)
 3e8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3ec:	00689102 	rsbeq	r9, r8, r2, lsl #2
 3f0:	69050413 	stmdbvs	r5, {r0, r1, r4, sl}
 3f4:	1400746e 	strne	r7, [r0], #-1134	; 0xfffffb92
 3f8:	00000197 	muleq	r0, r7, r1
 3fc:	b0012701 	andlt	r2, r1, r1, lsl #14
 400:	18200007 	stmdane	r0!, {r0, r1, r2}
 404:	01000000 	mrseq	r0, (UNDEF: 0)
 408:	010e159c 			; <UNDEFINED> instruction: 0x010e159c
 40c:	2a010000 	bcs	40414 <startup-0x1ffbfbec>
 410:	0007c801 	andeq	ip, r7, r1, lsl #16
 414:	00005c20 	andeq	r5, r0, r0, lsr #24
 418:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 41c:	0000011b 	andeq	r0, r0, fp, lsl r1
 420:	f0013e01 			; <UNDEFINED> instruction: 0xf0013e01
 424:	24000003 	strcs	r0, [r0], #-3
 428:	14200008 	strtne	r0, [r0], #-8
 42c:	01000000 	mrseq	r0, (UNDEF: 0)
 430:	0105179c 			; <UNDEFINED> instruction: 0x0105179c
 434:	22010000 	andcs	r0, r1, #0
 438:	0000003a 	andeq	r0, r0, sl, lsr r0
 43c:	08380305 	ldmdaeq	r8!, {r0, r2, r8, r9}
 440:	4b172000 	blmi	5c8448 <startup-0x1fa37bb8>
 444:	01000000 	mrseq	r0, (UNDEF: 0)
 448:	00003a23 	andeq	r3, r0, r3, lsr #20
 44c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
 450:	17200008 	strne	r0, [r0, -r8]!
 454:	0000021a 	andeq	r0, r0, sl, lsl r2
 458:	04642401 	strbteq	r2, [r4], #-1025	; 0xfffffbff
 45c:	03050000 	movweq	r0, #20480	; 0x5000
 460:	20000840 	andcs	r0, r0, r0, asr #16
 464:	00003a18 	andeq	r3, r0, r8, lsl sl
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	002e0400 	eoreq	r0, lr, r0, lsl #8
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	00194297 	mulseq	r9, r7, r2
  40:	002e0500 	eoreq	r0, lr, r0, lsl #10
  44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  54:	06000019 			; <UNDEFINED> instruction: 0x06000019
  58:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  5c:	0b3a0e03 	bleq	e83870 <startup-0x1f17c790>
  60:	01110b3b 	tsteq	r1, fp, lsr fp
  64:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  68:	00194296 	mulseq	r9, r6, r2
  6c:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
  70:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  74:	0b3b0b3a 	bleq	ec2d64 <startup-0x1f13d29c>
  78:	01111927 	tsteq	r1, r7, lsr #18
  7c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  80:	01194296 			; <UNDEFINED> instruction: 0x01194296
  84:	08000013 	stmdaeq	r0, {r0, r1, r4}
  88:	08030005 	stmdaeq	r3, {r0, r2}
  8c:	0b3b0b3a 	bleq	ec2d7c <startup-0x1f13d284>
  90:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  94:	0b090000 	bleq	24009c <startup-0x1fdbff64>
  98:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  9c:	0a000006 	beq	bc <startup-0x1fffff44>
  a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  ac:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	1119270b 	tstne	r9, fp, lsl #14
  bc:	40061201 	andmi	r1, r6, r1, lsl #4
  c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	3f012e0c 	svccc	0x00012e0c
  cc:	3a0e0319 	bcc	380d38 <startup-0x1fc7f2c8>
  d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  d4:	11134919 	tstne	r3, r9, lsl r9
  d8:	40061201 	andmi	r1, r6, r1, lsl #4
  dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  e0:	00001301 	andeq	r1, r0, r1, lsl #6
  e4:	0300050d 	movweq	r0, #1293	; 0x50d
  e8:	3b0b3a0e 	blcc	2ce928 <startup-0x1fd316d8>
  ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  f0:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  f8:	0b3a0e03 	bleq	e8390c <startup-0x1f17c6f4>
  fc:	01110b3b 	tsteq	r1, fp, lsr fp
 100:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 104:	01194296 			; <UNDEFINED> instruction: 0x01194296
 108:	0f000013 	svceq	0x00000013
 10c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 110:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 114:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 118:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 11c:	03193f01 	tsteq	r9, #1, 30
 120:	3b0b3a0e 	blcc	2ce960 <startup-0x1fd316a0>
 124:	11192705 	tstne	r9, r5, lsl #14
 128:	40061201 	andmi	r1, r6, r1, lsl #4
 12c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 130:	00001301 	andeq	r1, r0, r1, lsl #6
 134:	03000511 	movweq	r0, #1297	; 0x511
 138:	3b0b3a08 	blcc	2ce960 <startup-0x1fd316a0>
 13c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 140:	12000018 	andne	r0, r0, #24
 144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 14c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 150:	24130000 	ldrcs	r0, [r3], #-0
 154:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 158:	0008030b 	andeq	r0, r8, fp, lsl #6
 15c:	002e1400 	eoreq	r1, lr, r0, lsl #8
 160:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 168:	01111927 	tsteq	r1, r7, lsr #18
 16c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 170:	00194297 	mulseq	r9, r7, r2
 174:	002e1500 	eoreq	r1, lr, r0, lsl #10
 178:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 17c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 180:	06120111 			; <UNDEFINED> instruction: 0x06120111
 184:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 188:	16000019 			; <UNDEFINED> instruction: 0x16000019
 18c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 198:	01111349 	tsteq	r1, r9, asr #6
 19c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a0:	00194296 	mulseq	r9, r6, r2
 1a4:	00341700 	eorseq	r1, r4, r0, lsl #14
 1a8:	0b3a0e03 	bleq	e839bc <startup-0x1f17c644>
 1ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1b0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 1b4:	35180000 	ldrcc	r0, [r8, #-0]
 1b8:	00134900 	andseq	r4, r3, r0, lsl #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000828 	andeq	r0, r0, r8, lsr #16
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000838 	andcs	r0, r0, r8, lsr r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001c9 	andeq	r0, r0, r9, asr #3
   4:	00610002 	rsbeq	r0, r1, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  20:	7661642f 	strbtvc	r6, [r1], -pc, lsr #8
  24:	442f6469 	strtmi	r6, [pc], #-1129	; 2c <startup-0x1fffffd4>
  28:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  2c:	73746e65 	cmnvc	r4, #1616	; 0x650
  30:	646f432f 	strbtvs	r4, [pc], #-815	; 38 <startup-0x1fffffc8>
  34:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  38:	69687365 	stmdbvs	r8!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
  3c:	69672f74 	stmdbvs	r7!, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
  40:	61442f74 	hvcvs	17140	; 0x42f4
  44:	4465636e 	strbtmi	r6, [r5], #-878	; 0xfffffc92
  48:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
  4c:	6e61442f 	cdpvs	4, 6, cr4, cr1, cr15, {1}
  50:	442f6563 	strtmi	r6, [pc], #-1379	; 58 <startup-0x1fffffa8>
  54:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
  58:	61440000 	mrsvs	r0, (UNDEF: 68)
  5c:	5f65636e 	svcpl	0x0065636e
  60:	6e69616d 	powvsez	f6, f1, #5.0
  64:	0100632e 	tsteq	r0, lr, lsr #6
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000205 	andeq	r0, r0, r5, lsl #4
  70:	2d032000 	stccs	0, cr2, [r3, #-0]
  74:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  78:	01010003 	tsteq	r1, r3
  7c:	10020500 	andne	r0, r2, r0, lsl #10
  80:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  84:	4b310137 	blmi	c40568 <startup-0x1f3bfa98>
  88:	004b4b4b 	subeq	r4, fp, fp, asr #22
  8c:	06010402 	streq	r0, [r1], -r2, lsl #8
  90:	4b5a0620 	blmi	1681918 <startup-0x1e97e6e8>
  94:	302f309f 	mlacc	pc, pc, r0, r3	; <UNPREDICTABLE>
  98:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
  9c:	004b0304 	subeq	r0, fp, r4, lsl #6
  a0:	2d030402 	cfstrscs	mvf0, [r3, #-8]
  a4:	01040200 	mrseq	r0, R12_usr
  a8:	41063c06 	tstmi	r6, r6, lsl #24
  ac:	0200514b 	andeq	r5, r0, #-1073741806	; 0xc0000012
  b0:	00670304 	rsbeq	r0, r7, r4, lsl #6
  b4:	3b030402 	blcc	c10c4 <startup-0x1ff3ef3c>
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	3f063c06 	svccc	0x00063c06
  c0:	8359685c 	cmphi	r9, #92, 16	; 0x5c0000
  c4:	687559e5 	ldmdavs	r5!, {r0, r2, r5, r6, r7, r8, fp, ip, lr}^
  c8:	59d78359 	ldmibpl	r7, {r0, r3, r4, r6, r8, r9, pc}^
  cc:	10036768 	andne	r6, r3, r8, ror #14
  d0:	20700374 	rsbscs	r0, r0, r4, ror r3
  d4:	034a1003 	movteq	r1, #40963	; 0xa003
  d8:	3d3d2072 	ldccc	0, cr2, [sp, #-456]!	; 0xfffffe38
  dc:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
  e0:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
  e4:	3d3d3e59 	ldccc	14, cr3, [sp, #-356]!	; 0xfffffe9c
  e8:	2f3d31c9 	svccs	0x003d31c9
  ec:	4d2f3d75 	stcmi	13, cr3, [pc, #-468]!	; ffffff20 <STK_VAL+0xdffff6e0>
  f0:	d83e241e 	ldmdale	lr!, {r1, r2, r3, r4, sl, sp}
  f4:	833d3d67 	teqhi	sp, #6592	; 0x19c0
  f8:	2f3d2f59 	svccs	0x003d2f59
  fc:	593e3d59 	ldmdbpl	lr!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 100:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 104:	68d73d30 	ldmvs	r7, {r4, r5, r8, sl, fp, ip, sp}^
 108:	833d3d5b 	teqhi	sp, #5824	; 0x16c0
 10c:	303d2f59 	eorscc	r2, sp, r9, asr pc
 110:	593e3d59 	ldmdbpl	lr!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 114:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 118:	02040200 	andeq	r0, r4, #0, 4
 11c:	002e6b03 	eoreq	r6, lr, r3, lsl #22
 120:	06010402 	streq	r0, [r1], -r2, lsl #8
 124:	19030674 	stmdbne	r3, {r2, r4, r5, r6, r9, sl}
 128:	92e63e58 	rscls	r3, r6, #88, 28	; 0x580
 12c:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
 130:	30593e2f 	subscc	r3, r9, pc, lsr #28
 134:	673e3d3d 			; <UNDEFINED> instruction: 0x673e3d3d
 138:	83833e92 	orrhi	r3, r3, #2336	; 0x920
 13c:	593d9267 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r9, ip, pc}
 140:	3e6883c9 	cdpcc	3, 6, cr8, cr8, cr9, {6}
 144:	9f4b4b4b 	svcls	0x004b4b4b
 148:	03040200 	movweq	r0, #16896	; 0x4200
 14c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 150:	02009103 	andeq	r9, r0, #-1073741824	; 0xc0000000
 154:	00480304 	subeq	r0, r8, r4, lsl #6
 158:	06010402 	streq	r0, [r1], -r2, lsl #8
 15c:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 160:	00480602 	subeq	r0, r8, r2, lsl #12
 164:	06010402 	streq	r0, [r1], -r2, lsl #8
 168:	4b510658 	blmi	1441ad0 <startup-0x1ebbe530>
 16c:	4c4b4be5 	mcrrmi	11, 14, r4, fp, cr5
 170:	4b91c9e5 	blmi	fe47290c <STK_VAL+0xde4720cc>
 174:	4c4b4b91 	mcrrmi	11, 9, r4, fp, cr1
 178:	4d75c9e5 			; <UNDEFINED> instruction: 0x4d75c9e5
 17c:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
 180:	00580601 	subseq	r0, r8, r1, lsl #12
 184:	58020402 	stmdapl	r2, {r1, sl}
 188:	03040200 	movweq	r0, #16896	; 0x4200
 18c:	835b0658 	cmphi	fp, #88, 12	; 0x5800000
 190:	02002108 	andeq	r2, r0, #8, 2
 194:	4a060104 	bmi	1805ac <startup-0x1fe7fa54>
 198:	4b4b7706 	blmi	12dddb8 <startup-0x1ed22248>
 19c:	bb5a4b68 	bllt	1692f44 <startup-0x1e96d0bc>
 1a0:	00bb9fd8 	ldrsbteq	r9, [fp], r8
 1a4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1a8:	a1ae064a 			; <UNDEFINED> instruction: 0xa1ae064a
 1ac:	03ac6703 			; <UNDEFINED> instruction: 0x03ac6703
 1b0:	2f68201a 	svccs	0x0068201a
 1b4:	3d30753d 	cfldr32cc	mvfx7, [r0, #-244]!	; 0xffffff0c
 1b8:	3e3d3d3e 	mrccc	13, 1, r3, cr13, cr14, {1}
 1bc:	4b4b4b3d 	blmi	12d2eb8 <startup-0x1ed2d148>
 1c0:	3f3e4b4b 	svccc	0x003e4b4b
 1c4:	21302f2f 	teqcs	r0, pc, lsr #30
 1c8:	01000302 	tsteq	r0, r2, lsl #6
 1cc:	Address 0x00000000000001cc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
   4:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
   8:	31314320 	teqcc	r1, r0, lsr #6
   c:	342e3520 	strtcc	r3, [lr], #-1312	; 0xfffffae0
  10:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  14:	30363130 	eorscc	r3, r6, r0, lsr r1
  18:	20393139 	eorscs	r3, r9, r9, lsr r1
  1c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  20:	20626d75 	rsbcs	r6, r2, r5, ror sp
  24:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  28:	613d6863 	teqvs	sp, r3, ror #16
  2c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  30:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  34:	6f6c666d 	svcvs	0x006c666d
  38:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  3c:	733d6962 	teqvc	sp, #1605632	; 0x188000
  40:	2074666f 	rsbscs	r6, r4, pc, ror #12
  44:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  48:	5300304f 	movwpl	r3, #79	; 0x4f
  4c:	4c5f4b54 	mrrcmi	11, 5, r4, pc, cr4	; <UNPREDICTABLE>
  50:	0044414f 	subeq	r4, r4, pc, asr #2
  54:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
  58:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
  5c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  60:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  64:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffe9c <STK_VAL+0xdffff65c>
  68:	0072656c 	rsbseq	r6, r2, ip, ror #10
  6c:	70617267 	rsbvc	r7, r1, r7, ror #4
  70:	5f636968 	svcpl	0x00636968
  74:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  78:	6f635f65 	svcvs	0x00635f65
  7c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
  80:	72670064 	rsbvc	r0, r7, #100	; 0x64
  84:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  88:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  8c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 94 <startup-0x1fffff6c>
  90:	00617461 	rsbeq	r7, r1, r1, ror #8
  94:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
  98:	70007373 	andvc	r7, r0, r3, ror r3
  9c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
  a0:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
  a4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
  a8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  ac:	6e750061 	cdpvs	0, 7, cr0, cr5, cr1, {3}
  b0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  b4:	63206465 			; <UNDEFINED> instruction: 0x63206465
  b8:	00726168 	rsbseq	r6, r2, r8, ror #2
  bc:	616c6564 	cmnvs	ip, r4, ror #10
  c0:	30355f79 	eorscc	r5, r5, r9, ror pc
  c4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
  c8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  cc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  d0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  d4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  d8:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
  dc:	2074726f 	rsbscs	r7, r4, pc, ror #4
  e0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  e4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  e8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  ec:	61726700 	cmnvs	r2, r0, lsl #14
  f0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  f4:	6165725f 	cmnvs	r5, pc, asr r2
  f8:	6f635f64 	svcvs	0x00635f64
  fc:	6f72746e 	svcvs	0x0072746e
 100:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 104:	4b545300 	blmi	1514d0c <startup-0x1eaeb2f4>
 108:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
 10c:	7267004c 	rsbvc	r0, r7, #76	; 0x4c
 110:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 114:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 118:	6d007469 	cfstrsvs	mvf7, [r0, #-420]	; 0xfffffe5c
 11c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 120:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6c <startup-0x1fffff94>
 124:	61642f65 	cmnvs	r4, r5, ror #30
 128:	2f646976 	svccs	0x00646976
 12c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 130:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 134:	6f432f73 	svcvs	0x00432f73
 138:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 13c:	68736574 	ldmdavs	r3!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 140:	672f7469 	strvs	r7, [pc, -r9, ror #8]!
 144:	442f7469 	strtmi	r7, [pc], #-1129	; 14c <startup-0x1ffffeb4>
 148:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
 14c:	636e6144 	cmnvs	lr, #68, 2
 150:	61442f65 	cmpvs	r4, r5, ror #30
 154:	2f65636e 	svccs	0x0065636e
 158:	636e6144 	cmnvs	lr, #68, 2
 15c:	61442f65 	cmpvs	r4, r5, ror #30
 160:	5f65636e 	svcpl	0x0065636e
 164:	6e69616d 	powvsez	f6, f1, #5.0
 168:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 16c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 170:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 174:	5f6c7274 	svcpl	0x006c7274
 178:	5f746962 	svcpl	0x00746962
 17c:	61656c63 	cmnvs	r5, r3, ror #24
 180:	72670072 	rsbvc	r0, r7, #114	; 0x72
 184:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 188:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 18c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 190:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 194:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
 198:	5f74696e 	svcpl	0x0074696e
 19c:	00707061 	rsbseq	r7, r0, r1, rrx
 1a0:	616c6564 	cmnvs	ip, r4, ror #10
 1a4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1a8:	006f726b 	rsbeq	r7, pc, fp, ror #4
 1ac:	616c6564 	cmnvs	ip, r4, ror #10
 1b0:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 1b4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 1b8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 1bc:	00707574 	rsbseq	r7, r0, r4, ror r5
 1c0:	6b73616d 	blvs	1cd877c <startup-0x1e327884>
 1c4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 1c8:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 10e <startup-0x1ffffef2>	; <UNPREDICTABLE>
 1cc:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 1d0:	61726700 	cmnvs	r2, r0, lsl #14
 1d4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1dc:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1e4 <startup-0x1ffffe1c>
 1e0:	00617461 	rsbeq	r7, r1, r1, ror #8
 1e4:	70617267 	rsbvc	r7, r1, r7, ror #4
 1e8:	5f636968 	svcpl	0x00636968
 1ec:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1f0:	72670065 	rsbvc	r0, r7, #101	; 0x65
 1f4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1f8:	61775f63 	cmnvs	r7, r3, ror #30
 1fc:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 200:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 204:	61726700 	cmnvs	r2, r0, lsl #14
 208:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 20c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 210:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 214:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 218:	5453006e 	ldrbpl	r0, [r3], #-110	; 0xffffff92
 21c:	41565f4b 	cmpmi	r6, fp, asr #30
 220:	6e69004c 	cdpvs	0, 6, cr0, cr9, cr12, {2}
 224:	00786564 	rsbseq	r6, r8, r4, ror #10
 228:	5f64636c 	svcpl	0x0064636c
 22c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 230:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 234:	6e750061 	cdpvs	0, 7, cr0, cr5, cr1, {3}
 238:	385f7469 	ldmdacc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	342e353a 	strtcc	r3, [lr], #-1338	; 0xfffffac6
   c:	732b312e 			; <UNDEFINED> instruction: 0x732b312e
  10:	34326e76 	ldrtcc	r6, [r2], #-3702	; 0xfffff18a
  14:	35353131 	ldrcc	r3, [r5, #-305]!	; 0xfffffecf
  18:	2029312d 	eorcs	r3, r9, sp, lsr #2
  1c:	2e342e35 	mrccs	14, 1, r2, cr4, cr5, {1}
  20:	30322031 	eorscc	r2, r2, r1, lsr r0
  24:	39303631 	ldmdbcc	r0!, {r0, r4, r5, r9, sl, ip, sp}
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000004c 	andeq	r0, r0, ip, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000005c 	andcs	r0, r0, ip, asr r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000070 	andcs	r0, r0, r0, ror r0
  64:	00000028 	andeq	r0, r0, r8, lsr #32
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	180e4101 	stmdane	lr, {r0, r8, lr}
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000098 	mulcs	r0, r8, r0
  84:	0000002e 	andeq	r0, r0, lr, lsr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	180e4101 	stmdane	lr, {r0, r8, lr}
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c8 	andcs	r0, r0, r8, asr #1
  a4:	0000005c 	andeq	r0, r0, ip, asr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	180e4101 	stmdane	lr, {r0, r8, lr}
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000124 	andcs	r0, r0, r4, lsr #2
  c4:	00000058 	andeq	r0, r0, r8, asr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	180e4101 	stmdane	lr, {r0, r8, lr}
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	2000017c 	andcs	r0, r0, ip, ror r1
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	200001d8 	ldrdcs	r0, [r0], -r8
 104:	00000080 	andeq	r0, r0, r0, lsl #1
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000258 	andcs	r0, r0, r8, asr r2
 124:	000000a0 	andeq	r0, r0, r0, lsr #1
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002f8 	strdcs	r0, [r0], -r8
 144:	000000c4 	andeq	r0, r0, r4, asr #1
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	180e4101 	stmdane	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 164:	00000064 	andeq	r0, r0, r4, rrx
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000420 	andcs	r0, r0, r0, lsr #8
 184:	00000044 	andeq	r0, r0, r4, asr #32
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000464 	andcs	r0, r0, r4, ror #8
 1a4:	00000058 	andeq	r0, r0, r8, asr r0
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	100e4101 	andne	r4, lr, r1, lsl #2
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 1c4:	00000080 	andeq	r0, r0, r0, lsl #1
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	100e4101 	andne	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	2000053c 	andcs	r0, r0, ip, lsr r5
 1e4:	00000088 	andeq	r0, r0, r8, lsl #1
 1e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1f0:	018e4002 	orreq	r4, lr, r2
 1f4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	200005c4 	andcs	r0, r0, r4, asr #11
 208:	00000078 	andeq	r0, r0, r8, ror r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	180e4101 	stmdane	lr, {r0, r8, lr}
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	00000020 	andeq	r0, r0, r0, lsr #32
 220:	00000000 	andeq	r0, r0, r0
 224:	2000063c 	andcs	r0, r0, ip, lsr r6
 228:	00000174 	andeq	r0, r0, r4, ror r1
 22c:	400c0e41 	andmi	r0, ip, r1, asr #28
 230:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 234:	018e4002 	orreq	r4, lr, r2
 238:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 23c:	0000070d 	andeq	r0, r0, sp, lsl #14
 240:	00000018 	andeq	r0, r0, r8, lsl r0
 244:	00000000 	andeq	r0, r0, r0
 248:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 25c:	00000018 	andeq	r0, r0, r8, lsl r0
 260:	00000000 	andeq	r0, r0, r0
 264:	200007c8 	andcs	r0, r0, r8, asr #15
 268:	0000005c 	andeq	r0, r0, ip, asr r0
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 278:	00000018 	andeq	r0, r0, r8, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	20000824 	andcs	r0, r0, r4, lsr #16
 284:	00000014 	andeq	r0, r0, r4, lsl r0
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	070d4101 	streq	r4, [sp, -r1, lsl #2]
